import { ComponentDto } from './ComponentDto';
import { Logger } from '../log/Logger';
import SimpleLogger from '../log/SimpleLogger';
import { Component } from '../api/Component';
export declare abstract class AbstractLocalComponentLoader {
    /**
     * 临时文件夹
     * @private
     */
    private readonly _TEMP_PREFIX;
    /**
     * 扫描的最大深度
     * @private
     */
    private readonly _maxScanDepth;
    /**
     * sdk根路径
     * @private
     */
    protected readonly sdkRoot: string;
    /**
     * 日志
     * @protected
     */
    protected readonly logger: Logger;
    protected constructor(maxScanDepth: number, sdkRoot: string, logger?: SimpleLogger);
    /**
     * 加载本地的sdk
     */
    load(): Component[];
    /**
     * 获取元数据文件名称
     * @protected
     */
    protected abstract getUniPackageName(): string;
    /**
     * 将扫描到的文件转换为Component
     * @param potentialUniPackages
     * @protected
     */
    protected parseSdks(potentialUniPackages: string[]): Component[];
    /**
     * 将json字符串转换为ComponentDto类
     * @param jsonObject
     * @protected
     */
    protected convertComponent(jsonObject: any): ComponentDto;
    /**
     * 配置json里面的meta字段信息,需要子类重写
     * @param jsonObject
     * @param component
     * @protected
     */
    protected abstract configMeta(jsonObject: any, component: ComponentDto): void;
    /**
     * 校验sdk的路径
     *
     * @param component
     * @param uniPackage
     * @protected
     */
    protected isComponentInRightPlace(component: ComponentDto, uniPackage: string): boolean;
    protected addToMap(sdkMap: Map<string, Component>, component: Component): void;
    /**
     * 使用非递归方式扫描指定sdk根路径下潜在的sdk元数据文件
     * @param root
     * @protected
     */
    protected findPotentialSdks(root: string): string[];
    private _needScan;
    /**
     * 校验Component
     * @param component
     * @protected
     */
    protected isValidComponent(component: Component): boolean;
    private _isValidMetaVersion;
    /**
     * 获取sdk的路径
     * @param component
     * @param sdkRoot
     * @protected
     */
    protected getLocation(component: ComponentDto, sdkRoot: string): string | undefined;
    /**
     * 将path属性中的逗号替换成文件分隔符
     * @param componentPath
     * @protected
     */
    protected resolveComponentPath(componentPath: string): string;
}
