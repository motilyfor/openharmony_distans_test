"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SignShell=void 0;const ohos_hap_task_js_1=require("../task/ohos-hap-task.js"),path_1=__importDefault(require("path")),sign_util_js_1=require("../sign/sign-util.js"),sign_type_enum_js_1=require("../../enum/sign-type-enum.js"),runtime_type_enum_js_1=require("../../enum/runtime-type-enum.js"),task_names_js_1=require("../common/task-names.js"),pack_shell_js_1=require("./pack-shell.js"),validate_sign_js_1=require("../validate-sign.js");var ShellTask=task_names_js_1.TaskNames.ShellTask;const ohos_logger_js_1=require("../../utils/log/ohos-logger.js");class SignShell extends ohos_hap_task_js_1.OhosHapTask{constructor(e){super(e,ShellTask.SIGN_SHELL),this._log=ohos_logger_js_1.OhosLogger.getLogger(SignShell.name)}initTaskDepends(){this.module.registryDependsOnTask(this,new pack_shell_js_1.PackShell(this.service),new validate_sign_js_1.ValidateSigning(this.service));for(const e of this.service.getRelatedEntryModules()){const s=this.module.findModuleByName(e);s&&s.getTaskByName(ShellTask.PACK_SHELL.name)&&this.dependsOn(ShellTask.PACK_SHELL.name,s.getName())}}taskShouldDo(e){return e.getTargetStatus().is(runtime_type_enum_js_1.RuntimeTypeEnum.HARMONY_OS)}doTaskAction(e){const s=e.getPathInfo(),t=path_1.default.resolve(s.getIntermediatesApkDir(),e.getApkName());new sign_util_js_1.SignUtil(this.service,sign_type_enum_js_1.SignTypeEnum.SHELL,e.getProduct()).sign(t,t),this.signCutShell(e)}signCutShell(e){if("ohosTest"===e.getTargetName())return;const s=e.getPathInfo();for(const t of this.service.getRelatedEntryModules()){const i=e.findTargetDataByName(t);void 0===i&&this._log._buildError(`Module ${this.moduleName} must has the same target as ${t}. Current target '${e.getTargetName()}' is not found in module ${t}.`)._printErrorAndExit(this.moduleName),new sign_util_js_1.SignUtil(this.service,sign_type_enum_js_1.SignTypeEnum.SHELL,e.getProduct()).sign(path_1.default.resolve(i.getPathInfo().getIntermediatesApkDir(),i.getApkName(!0)),path_1.default.resolve(s.getIntermediatesApkDir(),i.getApkName(!0)))}}}exports.SignShell=SignShell;