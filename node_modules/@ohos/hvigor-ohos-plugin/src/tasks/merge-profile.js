"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,o,s){void 0===s&&(s=o);var i=Object.getOwnPropertyDescriptor(t,o);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,s,i)}:function(e,t,o,s){void 0===s&&(s=o),e[s]=t[o]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&__createBinding(t,e,o);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.MergeProfile=void 0;const fs=__importStar(require("fs-extra")),lodash_1=require("lodash"),path_1=__importDefault(require("path")),build_directory_const_js_1=require("../const/build-directory-const.js"),common_const_js_1=require("../const/common-const.js"),inject_util_js_1=require("../utils/inject-util.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),project_file_reader_js_1=require("../utils/project-file-reader.js"),task_names_js_1=require("./common/task-names.js"),pre_build_js_1=require("./pre-build.js"),ohos_hap_task_js_1=require("./task/ohos-hap-task.js");var Task=task_names_js_1.TaskNames.Task;class MergeProfile extends ohos_hap_task_js_1.OhosHapTask{constructor(e){super(e,Task.MERGE_PROFILE),this._log=ohos_logger_js_1.OhosLogger.getLogger(MergeProfile.name)}initTaskDepends(){this.module.registryDependsOnTask(this,new pre_build_js_1.PreBuild(this.service))}initHarModuleDepends(){this.service.getModuleDependencyNames().forEach((e=>{this.dependsOn(Task.MERGE_PROFILE.name,e)}))}doTaskAction(e){this._moduleTargetData=e;const t=this.service.getProjectModel(),o=e.getPathInfo();let s=(0,lodash_1.cloneDeep)(t.getAppRes().getAppResOpt());this.service.getModuleModel().isHarModule()&&(s={app:{bundleName:s.app.bundleName,debug:s.app.debug,versionCode:s.app.versionCode,versionName:s.app.versionName,minCompatibleVersionCode:s.app.minCompatibleVersionCode,minAPIVersion:s.app.minAPIVersion,targetAPIVersion:s.app.targetAPIVersion,apiReleaseType:s.app.apiReleaseType}});const i=this.service.getModuleModel().getSourceSetByTargetName(e.getTargetName()).getModuleTargetRes().getModuleJsonOpt(),r=this.service.getDependencyRootPaths(),a=this.service.getModuleDependencyPaths();[...(0,lodash_1.difference)(r,a).map((e=>path_1.default.resolve(e,"src","main",common_const_js_1.CommonConst.MODULE_JSON))),...a.map((e=>path_1.default.resolve(e,o.getBuildRoot(),"default",build_directory_const_js_1.BuildDirConst.INTERMEDIATES,build_directory_const_js_1.BuildDirConst.INTERMEDIATES_MERGE_PROFILE,"default",common_const_js_1.CommonConst.MODULE_JSON)))].forEach((e=>{if(fs.pathExistsSync(e))return project_file_reader_js_1.ProjectFileReader.getJson5Obj(e);this._log.warn(`${e} does not exist. This library will not be merged. This may occur when the project is manually modified and the local library is not declared in ${this.moduleModel.getParentProject().getProfilePath()}. Please confirm the correctness of this module. You may try to solve the problem by declare it in build-profile.json5.`)}));const n={...s,...i};this.mergeDslConfig(n),inject_util_js_1.InjectUtil.isDebug()&&(n.app.debug=!0);const l=o.getIntermediatesMergeProfile();fs.outputJSONSync(l,n,{spaces:"\t"})}mergeDslConfig(e){var t,o,s;const i=null===(t=this._moduleTargetData)||void 0===t?void 0:t.getProduct().bundleName,r=null===(o=this.service.getProjectModel())||void 0===o?void 0:o.getCompileApiVersion(),a=null===(s=this.service.getProjectModel())||void 0===s?void 0:s.getCompatibleApiVersion(),n=this.sdkInfo.getReleaseType();i&&(e.app.bundleName=i),this._log.debug(`Change app bundleName with '${i}'.`),e.app.targetAPIVersion=r,this._log.debug(`Change app target API version with '${r}'`),e.app.minAPIVersion=a,this._log.debug(`Change app minimum API version with '${a}'`),e.app.apiReleaseType=n,this._log.debug(`Change app api release type with '${n}'`)}}exports.MergeProfile=MergeProfile;