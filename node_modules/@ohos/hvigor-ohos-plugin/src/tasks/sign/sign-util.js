"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SignUtil=void 0;const sign_model_1=require("./command-builder-impl/sign-model"),process_utils_1=require("../../utils/process-utils"),array_util_1=require("../../utils/array-util"),sign_command_factory_1=require("./command-builder-impl/sign-command-factory"),ohos_logger_js_1=require("../../utils/log/ohos-logger.js"),module_task_service_1=require("../service/module-task-service"),validate_util_1=require("../../utils/validate-util"),sign_type_enum_js_1=require("../../enum/sign-type-enum.js"),keystore_utils_js_1=require("../../utils/keystore-utils.js"),fs_extra_1=__importDefault(require("fs-extra"));class SignUtil{constructor(e,t,i){this._log=ohos_logger_js_1.OhosLogger.getLogger(SignUtil.name),this._taskService=e,this._signType=t,this._targetProduct=i,this._signCommandFactory=new sign_command_factory_1.SignCommandFactory(this._taskService.getProjectModel().getCompileApiVersion())}sign(e,t){this.executeSign(new sign_model_1.SignModel(this._signType,e,t)),fs_extra_1.default.existsSync(t)||this._signType!==sign_type_enum_js_1.SignTypeEnum.SHELL||fs_extra_1.default.copyFileSync(e,t)}executeSign(e){const t=this._taskService.getProjectModel().getProfileOpt().app,i=this._targetProduct.signingConfig;if(void 0===i)return void(e.getSignType()===sign_type_enum_js_1.SignTypeEnum.SHELL?this.defaultSignShell(e):this._log.warn(`No signingConfig found for product ${this._targetProduct.name}`));const s=(0,array_util_1.getElementFromArr)(null==t?void 0:t.signingConfigs,i.substring(i.lastIndexOf(".")+1));if(void 0===s)return void(e.getSignType()===sign_type_enum_js_1.SignTypeEnum.SHELL?this.defaultSignShell(e):this._log.warn(`Will skip sign '${this._signType}'. Invalid signingConfig is configured for '${this._targetProduct.name}' product.`));const n=this._signCommandFactory.createCommandBuilder(this._taskService.getProjectModel(),s,this._taskService.getSdkInfo(),e).getSignCommand();if(this._signType===sign_type_enum_js_1.SignTypeEnum.HAP||this._signType===sign_type_enum_js_1.SignTypeEnum.HOS_HAP){const e=validate_util_1.ValidateUtil.getBundleNameFromP7b(this._taskService,s),t=validate_util_1.ValidateUtil.getBundleNameFromHap(this._taskService);t!==e&&this._log._buildError("The bundle name verification result does not match.")._solution(`Please ensure that bundleName in the hap is the same as that in the signingConfigs, \n              BundleName in Hap:${t}, BundleName in SigningConfigs:${e}.`)._file(this._taskService.getProjectModel().getProfilePath())._printErrorAndExit()}this._taskService instanceof module_task_service_1.ModuleTaskService?new process_utils_1.ProcessUtils(this._taskService.getModuleModel().getName(),`Sign${this._signType}`).executeSync(n):new process_utils_1.ProcessUtils(this._taskService.getProjectModel().getName(),`Sign${this._signType}`).executeSync(n)}static getDefaultSign(){return{material:{storeFile:keystore_utils_js_1.KeyStoreHelper.getDefaultDebugKeyStoreLocation(),storePassword:keystore_utils_js_1.KeyStoreHelper.DEFAULT_STORE_PASS,keyAlias:keystore_utils_js_1.KeyStoreHelper.DEFAULT_ALIAS,keyPassword:keystore_utils_js_1.KeyStoreHelper.DEFAULT_STORE_PASS,signAlg:"",profile:"",certpath:""},name:""}}defaultSignShell(e){const t=this._signCommandFactory.createCommandBuilder(this._taskService.getProjectModel(),SignUtil.getDefaultSign(),this._taskService.getSdkInfo(),e);new process_utils_1.ProcessUtils(this._taskService.getNode().getName(),`Sign${this._signType}`).executeSync(t.getSignCommand())}}exports.SignUtil=SignUtil;