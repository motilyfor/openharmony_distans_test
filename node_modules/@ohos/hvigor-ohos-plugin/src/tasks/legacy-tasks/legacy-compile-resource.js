"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LegacyCompileResource=void 0;const file_util_js_1=require("../../utils/file-util.js"),build_directory_const_js_1=require("../../const/build-directory-const.js"),path_1=__importDefault(require("path")),ohos_logger_js_1=require("../../utils/log/ohos-logger.js"),project_file_reader_js_1=require("../../utils/project-file-reader.js"),task_names_js_1=require("../common/task-names.js"),legacy_process_profile_js_1=require("./legacy-process-profile.js"),abstract_compile_resource_js_1=require("../abstract-compile-resource.js");var LegacyFATask=task_names_js_1.TaskNames.LegacyFATask;const module_type_enum_js_1=require("../../enum/module-type-enum.js"),common_const_js_1=require("../../const/common-const.js"),fs_extra_1=__importDefault(require("fs-extra"));class LegacyCompileResource extends abstract_compile_resource_js_1.AbstractCompileResource{constructor(e){super(e,LegacyFATask.COMPILE_RESOURCE),this._log=ohos_logger_js_1.OhosLogger.getLogger(LegacyCompileResource.name)}initTaskDepends(){this.module.registryDependsOnTask(this,new legacy_process_profile_js_1.LegacyProcessProfile(this.service))}beforeTask(e){const t=e.getPathInfo();file_util_js_1.FileUtil.checkDirWithoutDelete(t.getIntermediatesRes())}initHarModuleDepends(){this.service.getModuleDependencyNames().forEach((e=>{this.dependsOn(LegacyFATask.COMPILE_RESOURCE.name,e)}))}doTaskAction(e){if(this.moduleModel.getModuleType()===module_type_enum_js_1.ModuleType.Feature)for(const t of this.service.getRelatedEntryModules())this.module.findModuleByName(t)&&(this.compileRes(e,t),this.retainDeviceType(e,t));else this.compileRes(e)}compileRes(e,t=""){const s=e.getPathInfo(),o=s.getIntermediatesProcessLegacyProfile(),r=this.getCommonResToolBuilder(e);r.addJsonFile(o).addModulePackName(project_file_reader_js_1.ProjectFileReader.getJson5Obj(o).app.bundleName).addOutputDir(path_1.default.resolve(s.getIntermediatesRes(),t)).addResTable(path_1.default.resolve(this.getTaskTempDir(e),build_directory_const_js_1.BuildArtifactConst.RESOURCE_TABLE_H)),this.compile(r,this._log)}retainDeviceType(e,t){const s=e.findTargetDataByName(t);if(s){const o=s.getModuleModel().getDeviceTypes(),r=e.getModuleModel().getDeviceTypes().filter((e=>(null==o?void 0:o.indexOf(e))>-1)),i=path_1.default.resolve(e.getPathInfo().getIntermediatesRes(),t,common_const_js_1.CommonConst.CONFIG_JSON),a=project_file_reader_js_1.ProjectFileReader.getJson5Obj(i);a.module.deviceType=r,fs_extra_1.default.outputJsonSync(i,a,{spaces:"\t"}),0===r.length&&this._log.warn(`${this.moduleModel.getName()} and ${t} do not have the same device type. The ${this.moduleModel.getName()} hap is invalid.`)}else this._log._buildError(`Module ${this.moduleName} must has the same target as ${t}. Current target '${e.getTargetName()}' is not found in module ${t}.`)._printErrorAndExit(this.moduleName)}}exports.LegacyCompileResource=LegacyCompileResource;