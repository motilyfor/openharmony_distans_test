"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.BuildNativeWithCmake=void 0;const fs_extra_1=__importDefault(require("fs-extra")),path_1=__importDefault(require("path")),native_command_builder_js_1=require("../builder/native-command-builder.js"),process_utils_js_1=require("../utils/process-utils.js"),ohos_hap_task_js_1=require("./task/ohos-hap-task.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),pre_build_js_1=require("./pre-build.js"),task_names_js_1=require("./common/task-names.js");var Task=task_names_js_1.TaskNames.Task;const cmake_util_js_1=require("../utils/cmake-util.js");class BuildNativeWithCmake extends ohos_hap_task_js_1.OhosHapTask{constructor(e){var t;super(e,Task.BUILD_NATIVE_WITH_CMAKE),this._log=ohos_logger_js_1.OhosLogger.getLogger(BuildNativeWithCmake.name),this._moduleDir=this.moduleModel.getProjectDir(),this._nativeOption=null===(t=this.moduleModel.getProfileOpt().buildOption)||void 0===t?void 0:t.externalNativeOptions}initTaskDepends(){this.module.registryDependsOnTask(this,new pre_build_js_1.PreBuild(this.service))}taskShouldDo(e){return cmake_util_js_1.CmakeUtil.nativeTaskCondition(this.moduleModel,e,this._nativeOption)}doTaskAction(e){cmake_util_js_1.CmakeUtil.checkAbiFilters(this._nativeOption.abiFilters).forEach((t=>this.buildCommand(t,e)))}buildCommand(e,t){var i,a,s,o,l;const d=t.getPathInfo(),r=new native_command_builder_js_1.NativeCommandBuilder(this.sdkInfo.getCmakeTool()),_=path_1.default.resolve(d.getIntermediatesCppOutPut(),e),n=path_1.default.resolve(d.getNinjaWorkDir(),e);cmake_util_js_1.CmakeUtil.mkCodeModelRequest(n),this.cleanCache(n),r.addCmakeList(cmake_util_js_1.CmakeUtil.getCmakeListDir(this._moduleDir,null===(i=this._nativeOption)||void 0===i?void 0:i.path)).addTempFilePath(n).addOhosArch(e).addOutputDir(_).addBuildType("normal").addNativeSdk(this.sdkInfo.getSdkNativeDir()).addSystemName("OHOS").addOhosArchAbi(e).exportCompileCommands("ON").addToolChain(this.sdkInfo.getNativeToolchain()).addGenerator("Ninja").addMakeProgramPath(this.sdkInfo.getNativeNinjaTool());const u=null===(a=this._nativeOption)||void 0===a?void 0:a.cFlags,m=null===(s=this._nativeOption)||void 0===s?void 0:s.cppFlags;u&&""!==u.trim()&&r.addCFlags(u),m&&""!==m.trim()&&r.addCxxFlags(m);let h=r.build();const k=(null===(o=this._nativeOption)||void 0===o?void 0:o.arguments)?null===(l=this._nativeOption)||void 0===l?void 0:l.arguments:"";h=cmake_util_js_1.CmakeUtil.mergeCommandLine(h,k),this._log._printDebugCommand("Cmake",h),new process_utils_js_1.ProcessUtils(this.moduleName,this.name).executeSync(h)}cleanCache(e){const t=path_1.default.resolve(e,"CMakeCache.txt");fs_extra_1.default.removeSync(t)}}exports.BuildNativeWithCmake=BuildNativeWithCmake;